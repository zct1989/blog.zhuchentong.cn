(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{426:function(e,n,a){"use strict";a.r(n);var t=a(39),s=Object(t.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("openzeppelin中很重要的一块就是token,而其中比较常见的就是"),a("code",[e._v("ERC20")]),e._v(",而在"),a("code",[e._v("ERC20")]),e._v("基本合约的基础上"),a("code",[e._v("openzeppelin")]),e._v("也扩展出一些合约。")]),e._v(" "),a("ul",[a("li",[a("h5",{attrs:{id:"ierc20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ierc20"}},[e._v("#")]),e._v(" IERC20")])])]),e._v(" "),a("p",[e._v("IERC20格式的接口，自己实现ERC20合约时可以使用这个接口")]),e._v(" "),a("ul",[a("li",[a("h5",{attrs:{id:"erc20"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#erc20"}},[e._v("#")]),e._v(" ERC20")])])]),e._v(" "),a("p",[e._v("一个基本的ERC20合约，包含基本的交易功能")]),e._v(" "),a("ul",[a("li",[a("h5",{attrs:{id:"erc20burnable-sol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#erc20burnable-sol"}},[e._v("#")]),e._v(" ERC20Burnable.sol")])])]),e._v(" "),a("p",[e._v("在"),a("code",[e._v("ERC20")]),e._v("上添加了燃币功能")]),e._v(" "),a("ul",[a("li",[a("h5",{attrs:{id:"erc20capped-sol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#erc20capped-sol"}},[e._v("#")]),e._v(" ERC20Capped.sol")])])]),e._v(" "),a("p",[e._v("在"),a("code",[e._v("ERC20Mintable")]),e._v("上添加了设置币量上限功能，可发币的同时限制发币量不可以大于上限")]),e._v(" "),a("ul",[a("li",[a("h5",{attrs:{id:"erc20detailed-sol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#erc20detailed-sol"}},[e._v("#")]),e._v(" ERC20Detailed.sol")])])]),e._v(" "),a("p",[e._v("在"),a("code",[e._v("ERC20")]),e._v("上添加了详细信息，可以设置币种的名称，符号和精度")]),e._v(" "),a("ul",[a("li",[a("h5",{attrs:{id:"erc20mintable-sol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#erc20mintable-sol"}},[e._v("#")]),e._v(" ERC20Mintable.sol")])])]),e._v(" "),a("p",[e._v("在"),a("code",[e._v("ERC20")]),e._v("上添加了发币功能，发布者需要拥有发币角色")]),e._v(" "),a("ul",[a("li",[a("h5",{attrs:{id:"erc20pausable-sol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#erc20pausable-sol"}},[e._v("#")]),e._v(" ERC20Pausable.sol")])])]),e._v(" "),a("p",[e._v("在"),a("code",[e._v("ERC20")]),e._v("上添加了冻结功能，拥有冻结角色者可以冻结代币，冻结后代币无法流通交易")]),e._v(" "),a("ul",[a("li",[a("h5",{attrs:{id:"safeerc20-sol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#safeerc20-sol"}},[e._v("#")]),e._v(" SafeERC20.sol")])])]),e._v(" "),a("p",[e._v("在"),a("code",[e._v("ERC20")]),e._v("上安全认证，在交易相关的方法中认证返回值")]),e._v(" "),a("ul",[a("li",[a("h5",{attrs:{id:"tokentimelock-sol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tokentimelock-sol"}},[e._v("#")]),e._v(" TokenTimelock.sol")])])]),e._v(" "),a("p",[e._v("这一个锁定时间提取代币的合约，这个在固定时间后可以将代币合约账户内的代币转移给对应的账户")]),e._v(" "),a("p",[e._v("当然这些合约的核心还是"),a("code",[e._v("ERC20.sol")]),e._v("，我们主要看一下"),a("code",[e._v("ERC20")]),e._v("相关的内容和实现:")]),e._v(" "),a("h4",{attrs:{id:"erc20-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#erc20-2"}},[e._v("#")]),e._v(" ERC20")]),e._v(" "),a("h5",{attrs:{id:"全局变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局变量"}},[e._v("#")]),e._v(" 全局变量")]),e._v(" "),a("hr"),e._v(" "),a("ul",[a("li",[e._v("账户余额")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  mapping (address => uint256) private _balances\n")])])]),a("ul",[a("li",[e._v("账户授权")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  mapping (address => mapping (address => uint256)) private _allowed;\n")])])]),a("ul",[a("li",[e._v("发币总额")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  uint256 private _totalSupply;\n")])])]),a("h5",{attrs:{id:"事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件"}},[e._v("#")]),e._v(" 事件")]),e._v(" "),a("hr"),e._v(" "),a("ul",[a("li",[e._v("交易事件")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("event Transfer(\n   address indexed from,\n   address indexed to,\n   uint256 value\n);\n")])])]),a("ul",[a("li",[e._v("授权事件")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("event Approval(\n   address indexed owner,\n   address indexed spender,\n   uint256 value\n);\n")])])]),a("h5",{attrs:{id:"方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[e._v("#")]),e._v(" 方法")]),e._v(" "),a("hr"),e._v(" "),a("ul",[a("li",[e._v("获取发行总额")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function totalSupply() public view returns (uint256)\n")])])]),a("ul",[a("li",[e._v("获取账户余额")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function balanceOf(address owner) public view returns (uint256)\n")])])]),a("ul",[a("li",[e._v("获取授权额度")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function allowance(\n    address owner,\n    address spender\n)\npublic  view returns (uint256)\n")])])]),a("ul",[a("li",[e._v("代币交易(发送代币)")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function transfer(address to, uint256 value) public returns (bool)\n")])])]),a("ul",[a("li",[e._v("代币授权")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function approve(address spender, uint256 value) public returns (bool)\n")])])]),a("ul",[a("li",[e._v("代币授权交易(发送授权方的代币)")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function transferFrom(\n   address from,\n   address to,\n   uint256 value\n )\npublic returns (bool)\n")])])]),a("ul",[a("li",[e._v("增长授权额度")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function increaseAllowance(\n   address spender,\n   uint256 addedValue\n )\npublic returns (bool)\n")])])]),a("ul",[a("li",[e._v("减少授权额度")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function decreaseAllowance(\n  address spender,\n  uint256 subtractedValue\n)\n")])])]),a("ul",[a("li",[e._v("代币交易(内部)")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function _transfer(address from, address to, uint256 value) internal \n")])])]),a("ul",[a("li",[e._v("发币(内部)")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function _mint(address account, uint256 value) internal\n")])])]),a("ul",[a("li",[e._v("烧币(内部)(将代币发送到空地址)")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function _mint(address account, uint256 value) internal\n")])])]),a("ul",[a("li",[e._v("烧币-授权方(内部)")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function _burnFrom(address account, uint256 value) internal\n")])])]),a("h5",{attrs:{id:"合约代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合约代码"}},[e._v("#")]),e._v(" 合约代码")]),e._v(" "),a("hr"),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("contract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  * @dev 代币总额\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @dev 获取对应账户代币余额\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @dev 获取对应账户授权额\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @dev 将代币发送指定地址\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @dev 发送指定地址的代币-需要授权\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);