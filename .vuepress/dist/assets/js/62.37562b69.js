(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{379:function(e,n,r){"use strict";r.r(n);var t=r(39),a=Object(t.a)({},(function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("之前说了对取消订单的操作，可以通过传入订单信息，由maker发起取消订单操作，并签名执行。另一种取消订单的方式是可以按时间点取消订单。")]),e._v(" "),r("p",[e._v("在"),r("code",[e._v("cancel_orders_up_to")]),e._v("场景中就描述了这种操作，不同的是在创建订单时，不是使用"),r("code",[e._v("generatePseudoRandomSalt")]),e._v("来设置"),r("code",[e._v("salt")]),e._v("而是通过"),r("code",[e._v("时间戳")]),e._v("去设置。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const order = {\n ...\n salt: new BigNumber(Date.now()),\n ...\n}\n")])])]),r("p",[e._v("这样对订单就添加了时间标记，这是如果需要取消订单那么就可以使用"),r("code",[e._v("cancelOrdersUpToAsync")]),e._v("来取消订单")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("contractWrappers.exchange.cancelOrdersUpToAsync(时间节点,maker)\n")])])]),r("p",[e._v("它会取消在该时间节点之前的所有订单。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("Order Info\n order1      Fillable\n order2      Fillable\n order3      Fillable\n\nTransaction\n┌──────────────────┬────────────────────────────────────────────────────────────────────┐\n│ cancelOrdersUpTo │ 0xc97ad364611e9de56721f1abddbe3034880556e682b5becd7c0d88524c903131 │\n├──────────────────┼────────────────────────────────────────────────────────────────────┤\n│ targetOrderEpoch │ 1552013245054                                                      │\n├──────────────────┼────────────────────────────────────────────────────────────────────┤\n│ gasUsed          │ 55772                                                              │\n├──────────────────┼────────────────────────────────────────────────────────────────────┤\n│ status           │ Success                                                            │\n└──────────────────┴────────────────────────────────────────────────────────────────────┘\n\nLogs\n CancelUpTo\n contract       0x48bacb9266a570d521063ef5dd96e61686dbe788\n makerAddress   0x5409ed021d9299bf6814279a6a1411a7e866a631\n senderAddress  0x0000000000000000000000000000000000000000\n orderEpoch     1552013245055\n Order Info\n order1      Cancelled\n order2      Cancelled\n order3      Fillable\n")])])]),r("p",[e._v("该场景中具体代码如下:")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("PrintUtils.printScenario('Cancel Orders Up To');\n    // Initialize the ContractWrappers, this provides helper functions around calling\n    // 0x contracts as well as ERC20/ERC721 token contracts on the blockchain\n    const contractWrappers = new ContractWrappers(providerEngine, { networkId: NETWORK_CONFIGS.networkId });\n    // Initialize the Web3Wrapper, this provides helper functions around fetching\n    // account information, balances, general contract logs\n    const web3Wrapper = new Web3Wrapper(providerEngine);\n    // 获取maker，taker地址\n    const [maker, taker] = await web3Wrapper.getAvailableAddressesAsync();\n    const zrxTokenAddress = contractAddresses.zrxToken;\n    const etherTokenAddress = contractAddresses.etherToken;\n    const printUtils = new PrintUtils(\n        web3Wrapper,\n        contractWrappers,\n        { maker, taker },\n        { WETH: etherTokenAddress, ZRX: zrxTokenAddress },\n    );\n    printUtils.printAccounts();\n\n    // 设置交易金额\n    // the amount the maker is selling of maker asset\n    const makerAssetAmount = new BigNumber(100);\n    // the amount the maker wants of taker asset\n    const takerAssetAmount = new BigNumber(10);\n    // 设置交易币种\n    // 0x v2 uses hex encoded asset data strings to encode all the information needed to identify an asset\n    const makerAssetData = assetDataUtils.encodeERC20AssetData(zrxTokenAddress);\n    const takerAssetData = assetDataUtils.encodeERC20AssetData(etherTokenAddress);\n\n    // Set up the Order and fill it\n    // 设置交易地址，交易过期时间\n    const randomExpiration = getRandomFutureDateInSeconds();\n    const exchangeAddress = contractAddresses.exchange;\n\n    // Rather than using a random salt, we use an incrementing salt value.\n    // When combined with cancelOrdersUpTo, all lesser values of salt can be cancelled\n    // This allows the maker to cancel many orders with one on-chain transaction\n\n    // Create the order\n    // 创建订单\n    // salt为10分钟之前的时间戳\n    const order1: Order = {\n        exchangeAddress,\n        makerAddress: maker,\n        takerAddress: NULL_ADDRESS,\n        senderAddress: NULL_ADDRESS,\n        feeRecipientAddress: NULL_ADDRESS,\n        expirationTimeSeconds: randomExpiration,\n        salt: new BigNumber(Date.now() - TEN_MINUTES_MS),\n        makerAssetAmount,\n        takerAssetAmount,\n        makerAssetData,\n        takerAssetData,\n        makerFee: ZERO,\n        takerFee: ZERO,\n    };\n\n    // order2为一分钟之前的时间戳\n    const order2: Order = {\n        ...order1,\n        salt: new BigNumber(Date.now() - ONE_MINUTE_MS),\n    };\n\n    // order3为现在的时间戳\n    const order3: Order = {\n        ...order1,\n        salt: new BigNumber(Date.now()),\n    };\n\n    // Fetch and print the order info\n    // 打印订单信息\n    let order1Info = await contractWrappers.exchange.getOrderInfoAsync(order1);\n    let order2Info = await contractWrappers.exchange.getOrderInfoAsync(order2);\n    let order3Info = await contractWrappers.exchange.getOrderInfoAsync(order3);\n    printUtils.printOrderInfos({ order1: order1Info, order2: order2Info, order3: order3Info });\n\n    // Maker cancels all orders before and including order2, order3 remains valid\n    // 取消包括order2之前的所有订单\n    // order3在order2之后，仍然有效\n    const targetOrderEpoch = order2.salt;\n    const txHash = await contractWrappers.exchange.cancelOrdersUpToAsync(targetOrderEpoch, maker, {\n        gasLimit: TX_DEFAULTS.gas,\n    });\n    const txReceipt = await printUtils.awaitTransactionMinedSpinnerAsync('cancelOrdersUpTo', txHash);\n    printUtils.printTransaction('cancelOrdersUpTo', txReceipt, [['targetOrderEpoch', targetOrderEpoch.toString()]]);\n    // Fetch and print the order info\n    // 打印订单信息\n    order1Info = await contractWrappers.exchange.getOrderInfoAsync(order1);\n    order2Info = await contractWrappers.exchange.getOrderInfoAsync(order2);\n    order3Info = await contractWrappers.exchange.getOrderInfoAsync(order3);\n    printUtils.printOrderInfos({ order1: order1Info, order2: order2Info, order3: order3Info });\n\n    // Stop the Provider Engine\n    providerEngine.stop();\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);