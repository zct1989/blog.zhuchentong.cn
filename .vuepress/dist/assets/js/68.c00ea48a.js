(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{385:function(e,t,a){"use strict";a.r(t);var n=a(39),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_03-数据预处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_03-数据预处理"}},[e._v("#")]),e._v(" 03-数据预处理")]),e._v(" "),a("p",[e._v("在进行学习机器学习的开始，首先需要了解的是数据预处理的部分，数据预处理就是将数据准备为可以进行数据拟合与训练的格式，便于我们利用这些数据，我们一般可能需要通过:")]),e._v(" "),a("ol",[a("li",[e._v("数据准备")]),e._v(" "),a("li",[e._v("处理确实数据")]),e._v(" "),a("li",[e._v("标签编码转换")]),e._v(" "),a("li",[e._v("虚拟编码转换")]),e._v(" "),a("li",[e._v("生成训练集与测试集")]),e._v(" "),a("li",[e._v("特征缩放")])]),e._v(" "),a("p",[e._v("等几部分进行操作，来准备用与机器学习的数据。")]),e._v(" "),a("h4",{attrs:{id:"基础库准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础库准备"}},[e._v("#")]),e._v(" 基础库准备")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("我们一般需要引入"),a("code",[e._v("numpy")]),e._v(","),a("code",[e._v("pandas")]),e._v(","),a("code",[e._v("matplotlib")]),e._v("作为基础库来便于我们之后的数据操作")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("### 导入基础库\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n")])])]),a("h4",{attrs:{id:"数据准备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据准备"}},[e._v("#")]),e._v(" 数据准备")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("根据数据准备的格式进行处理，可以通过"),a("code",[e._v("pandas")]),e._v("来读取常见的数据")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("dataset = pd.read_csv('Data.csv')\n")])])]),a("hr"),e._v(" "),a("p",[e._v("读取到的数据,需要根据数据的类型来设为对应的自变量与因变量数据")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# 设置自变量列，因变量列\nX = dataset.iloc[:,:-1]. values\nY = dataset.iloc[:,3].values\n")])])]),a("h4",{attrs:{id:"处理确实数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理确实数据"}},[e._v("#")]),e._v(" 处理确实数据")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("在自变量数据中会存在部分空数据即缺失数据，我们一般需要对这些缺失数据进行处理并补全，我们这里使用"),a("code",[e._v("sklearn")]),e._v("的"),a("code",[e._v("SimpleImputer")]),e._v("来完成这个操作")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("### 处理缺失数据\nfrom sklearn.impute import SimpleImputer\n# 创建imputer对象\n# mean 使用平均数进行填充\n# mediain 使用中位数进行填充\nimputer = SimpleImputer(missing_values=np.nan,strategy= 'median')\n# 拟合并计算生成缺失数据\nX[:,1:3] = imputer.fit_transform(X[:,1:3])\n")])])]),a("p",[e._v("其中"),a("code",[e._v("SimpleImputer")]),e._v("的参数"),a("code",[e._v("missing_values")]),e._v("是需要补全的缺失数据类型,参数"),a("code",[e._v("strategy")]),e._v("是对应的补全策略,常见的有"),a("code",[e._v("mean")]),e._v(","),a("code",[e._v("mediain")]),e._v("等策略。")]),e._v(" "),a("h4",{attrs:{id:"标签转换编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标签转换编码"}},[e._v("#")]),e._v(" 标签转换编码")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("标签编码转换是将一些需要处理后使用的字符数据转换为可以进行直接处理的数字编码，如"),a("code",[e._v("国家")]),e._v(","),a("code",[e._v("职位")]),e._v("等数据，在数据处理中只需要将他们转换为1,2,3进行显示,这里使用"),a("code",[e._v("sklearn")]),e._v("的"),a("code",[e._v("LabelEncoder")]),e._v("来进行处理。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("### 标签转换编码\n# 将标签转换为1，2，3\nfrom sklearn.preprocessing import LabelEncoder;\nlabelencoder_X = LabelEncoder()\n# 对自变量列实现数字编码\nX[:,0] = labelencoder_X.fit_transform(X[:,0]) \n# 对因变量列实现数字编码\nlabelencoder_Y = LabelEncoder()\nY = labelencoder_X.fit_transform(Y)\n")])])]),a("h4",{attrs:{id:"虚拟编码转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟编码转换"}},[e._v("#")]),e._v(" 虚拟编码转换")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("在一些标签数据中，其实并没有大小关系以及顺序，如国家转换为的1,2,3,我们为了排除这些影响，我们需要将他们转换为"),a("strong",[e._v("虚拟编码")]),e._v("进行显示，如"),a("code",[e._v("0 0 1")]),e._v(","),a("code",[e._v("0 1 0")]),e._v(","),a("code",[e._v("1 0 0")]),e._v("这样，让数据只是来标记他们的类型，而不是其他的关系。\n我们这里需要使用"),a("code",[e._v("sklearn")]),e._v("的"),a("code",[e._v("OneHotEncoder")]),e._v("与"),a("code",[e._v("ColumnTransformer")]),e._v("来进行处理")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('### 虚拟编码\n# 将标签转换为0,0,1 0,1,0 1,0,0\nfrom sklearn.preprocessing import OneHotEncoder;\nfrom sklearn.compose import ColumnTransformer \n# 进行虚拟编码\nonehotEncoder = OneHotEncoder() \n# 对第0列实现虚拟编码\nct = ColumnTransformer([("OneHot", OneHotEncoder(),[0])], remainder="passthrough")\nX = ct.fit_transform(X)\n')])])]),a("h4",{attrs:{id:"生成训练集与测试集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成训练集与测试集"}},[e._v("#")]),e._v(" 生成训练集与测试集")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("数据准备好后，我们需要将数据分为"),a("strong",[e._v("训练集")]),e._v("与"),a("strong",[e._v("测试集")]),e._v("两部分，我们使用"),a("code",[e._v("sklearn")]),e._v("的"),a("code",[e._v("train_test_split")]),e._v("来进行处理。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("### 生成训练集与测试集\nfrom sklearn.model_selection import train_test_split\n# 使用固定值生成训练集/测试集\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=0)\n")])])]),a("h4",{attrs:{id:"特征缩放"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特征缩放"}},[e._v("#")]),e._v(" 特征缩放")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("在数据都准备好之后，可能会有一些其他问题，如数据中的金额可能是"),a("code",[e._v("1800000元")]),e._v(",年龄可能会是"),a("code",[e._v("18")]),e._v("岁，这些数据的数量级差别过大，可能在计算对计算结果产生一些影响，我们在一些情况下希望将他们变成相同的数据级进行处理，这时候就需要进行特征缩放处理。\n我们使用"),a("code",[e._v("sklearn")]),e._v("来"),a("code",[e._v("StandardScaler")]),e._v("来进行特征缩放的处理。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("### 特征缩放\n# 将不同数量级的数据，缩放到同一数量级\nfrom sklearn.preprocessing import StandardScaler\n# 对自变量进行特征缩放\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\n")])])]),a("p",[e._v("在此我们基本完成了数据预处理的操作，只有我们就可以对数据进行拟合和训练的处理，我们下一章会来了解关于线性回归的相关内容，完整的数据预处理代码如下:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("# 数据预处理\n\n### 导入基础库\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n### 导入数据\ndataset = pd.read_csv('Data.csv')\n\n# 设置自变量列，因变量列\nX = dataset.iloc[:,:-1]. values\nY = dataset.iloc[:,3].values\n\n### 处理缺失数据\nfrom sklearn.impute import SimpleImputer\n# 创建imputer对象\n# mean 使用平均数进行填充\n# mediain 使用中位数进行填充\nimputer = SimpleImputer(missing_values=np.nan,strategy= 'median')\n# 拟合imputer对象\n# 实际是使用拟合结果进行填充\n#imputer = imputer.fit(X[:,1:3])\n# 计算缺失对象\n# X[:,1:3]= imputer.transform(X[:,1:3]) \n# 可以将拟合与计算两部合并处理\nX[:,1:3] = imputer.fit_transform(X[:,1:3])\n \n\n### 标签转换编码\n# 将标签转换为1，2，3\nfrom sklearn.preprocessing import LabelEncoder;\nlabelencoder_X = LabelEncoder()\n# 拟合并转换\nX[:,0] = labelencoder_X.fit_transform(X[:,0]) \n\n### 虚拟编码\n# 将标签转换为0,0,1 0,1,0 1,0,0\nfrom sklearn.preprocessing import OneHotEncoder;\nfrom sklearn.compose import ColumnTransformer \n# 对国家列实现虚拟编码\nonehotEncoder = OneHotEncoder() \nct = ColumnTransformer([(\"OneHot\", OneHotEncoder(),[0])], remainder=\"passthrough\") # The last arg ([0]) is the list of columns you want to transform in this step\nX = ct.fit_transform(X)\n\n# 对因变量列实现数字编码\nlabelencoder_Y = LabelEncoder()\nY = labelencoder_X.fit_transform(Y)\n\n\n### 生成训练集与测试集\nfrom sklearn.model_selection import train_test_split\n# 使用固定值生成训练集/测试集\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=0)\n\n### 特征缩放\n# 将不同数量级的数据，缩放到同一数量级\nfrom sklearn.preprocessing import StandardScaler\n# 对自变量进行特征缩放\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);