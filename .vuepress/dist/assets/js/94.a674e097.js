(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{411:function(a,e,t){"use strict";t.r(e);var n=t(39),s=Object(n.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",[a._v("最近看到了eslint，他是为了团队代码规范的检查工具，其中一些风格规范也是代码书写时候可以学习和注意的地方，本文针对"),t("a",{attrs:{href:"http://standardjs.com/rules.html#javascript-standard-style",target:"_blank",rel:"noopener noreferrer"}},[a._v("JavaScript Standard Style"),t("OutboundLink")],1),a._v("规范进行总结和整理，你也可以通过链接去阅读原文去进行学习。")]),a._v(" "),t("hr"),a._v(" "),t("ul",[t("li",[t("h4",{attrs:{id:"使用两个空格进行缩进"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用两个空格进行缩进"}},[a._v("#")]),a._v(" 使用两个空格进行缩进")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function hello (name) {\n  console.log('hi', name)\n}\n")])])]),t("ul",[t("li",[t("h4",{attrs:{id:"使用单引号引用字符串-嵌套时使用双引号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用单引号引用字符串-嵌套时使用双引号"}},[a._v("#")]),a._v(" 使用单引号引用字符串,嵌套时使用双引号")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("console.log('hello there')\n$(\"<div class='box'>\")\n")])])]),t("ul",[t("li",[t("h4",{attrs:{id:"不要有未使用的变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不要有未使用的变量"}},[a._v("#")]),a._v(" 不要有未使用的变量")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//bad\nfunction myFunction () {\n  var result = something()   // ✗ avoid \n}\n\n// Write-only variables are not considered as used.\nvar y = 10;\ny = 5;\n\n// By default, unused arguments cause warnings.\n(function(foo) {\n    return 5;\n})();\n\n//good\nvar x = 10;\nalert(x)\n")])])]),a._v(" "),t("ul",[t("li",[t("h4",{attrs:{id:"在关键字后添加空格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在关键字后添加空格"}},[a._v("#")]),a._v(" 在关键字后添加空格")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("if (condition) { ... }   // ✓ ok \nif(condition) { ... }    // ✗ avoid \n")])])]),t("ul",[t("li",[t("h4",{attrs:{id:"在方法定义的括号前添加空格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在方法定义的括号前添加空格"}},[a._v("#")]),a._v(" 在方法定义的括号前添加空格")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function name (arg) { ... }   // ✓ ok \nfunction name(arg) { ... }    // ✗ avoid \n \nrun(function () { ... })      // ✓ ok \nrun(function() { ... })       // ✗ avoid \n")])])]),t("ul",[t("li",[t("h4",{attrs:{id:"要记着用-去代替"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#要记着用-去代替"}},[a._v("#")]),a._v(" 要记着用"),t("code",[a._v("===")]),a._v("去代替"),t("code",[a._v("==")])])])]),a._v(" "),t("p",[t("em",[a._v("当检查值为 "),t("code",[a._v("null")]),a._v(" 或 "),t("code",[a._v("undefined")]),a._v("时，可以使用"),t("code",[a._v("==")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("if (name === 'John')   // ✓ ok \nif (name == 'John')    // ✗ avoid \n\nif (name !== 'John')   // ✓ ok \nif (name != 'John')    // ✗ avoid \n")])])]),t("ul",[t("li",[t("h4",{attrs:{id:"使用空格去隔开运算符与参数-表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用空格去隔开运算符与参数-表达式"}},[a._v("#")]),a._v(" 使用空格去隔开运算符与参数/表达式")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// ✓ ok \nvar x = 2\nvar message = 'hello, ' + name + '!'\n\n// ✗ avoid \nvar x=2\nvar message = 'hello, '+name+'!'\n")])])]),t("ul",[t("li",[t("h4",{attrs:{id:"记得在逗号后面加上空格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#记得在逗号后面加上空格"}},[a._v("#")]),a._v(" 记得在逗号后面加上空格")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// ✓ ok \nvar list = [1, 2, 3, 4]\nfunction greet (name, options) { ... }\n\n// ✗ avoid \nvar list = [1,2,3,4]\nfunction greet (name,options) { ... }\n")])])]),t("ul",[t("li",[t("h4",{attrs:{id:"把else和大括号放在同一行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#把else和大括号放在同一行"}},[a._v("#")]),a._v(" 把"),t("code",[a._v("else")]),a._v("和大括号放在同一行")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// ✓ ok \nif (condition) {\n  // ... \n} else {\n  // ... \n}\n// ✗ avoid \nif (condition) {\n  // ... \n}\nelse {\n  // ... \n}\n")])])]),t("ul",[t("li",[t("h4",{attrs:{id:"如果是多行的if判断-记得带上大括号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如果是多行的if判断-记得带上大括号"}},[a._v("#")]),a._v(" 如果是多行的"),t("code",[a._v("if")]),a._v("判断，记得带上大括号")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// ✓ ok \nif (options.quiet !== true) console.log('done')\n// ✓ ok \nif (options.quiet !== true) {\n  console.log('done')\n}\n// ✗ avoid \nif (options.quiet !== true)\n  console.log('done')\n")])])]),t("ul",[t("li",[t("h4",{attrs:{id:"记得要处理函数的错误状态参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#记得要处理函数的错误状态参数"}},[a._v("#")]),a._v(" 记得要处理函数的错误状态参数")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// ✓ ok \nrun(function (err) {\n  if (err) throw err\n  window.alert('done')\n})\n\n// ✗ avoid \nrun(function (err) {\n  window.alert('done')\n})\n")])])]),t("ul",[t("li",[t("h4",{attrs:{id:"记得在全局对象前使用window"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#记得在全局对象前使用window"}},[a._v("#")]),a._v(" 记得在全局对象前使用"),t("code",[a._v("window")])])])]),a._v(" "),t("p",[a._v("("),t("em",[a._v("这个我也不太理解,应该是不要使用"),t("code",[a._v("alert")]),a._v("应该使用"),t("code",[a._v("window.alert")]),a._v("吧")]),a._v(")")]),a._v(" "),t("p",[t("em",[a._v("使用document, console 和 navigator时除外")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("window.alert('hi')   // ✓ ok \n")])])]),t("ul",[t("li",[t("h4",{attrs:{id:"多个连续的空行是禁止的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多个连续的空行是禁止的"}},[a._v("#")]),a._v(" 多个连续的空行是禁止的")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// ✓ ok \nvar value = 'hello world'\nconsole.log(value)\n// ✗ avoid \nvar value = 'hello world'\n \n \nconsole.log(value)\n")])])]),t("ul",[t("li",[t("h4",{attrs:{id:"当使用多行的三元运算符时-行首应该是-或"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#当使用多行的三元运算符时-行首应该是-或"}},[a._v("#")]),a._v(" 当使用多行的三元运算符时,行首应该是"),t("code",[a._v("?")]),a._v("或"),t("code",[a._v(":")])])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// ✓ ok \nvar location = env.development ? 'localhost' : 'www.api.com'\n \n// ✓ ok \nvar location = env.development\n  ? 'localhost'\n  : 'www.api.com'\n \n// ✗ avoid \nvar location = env.development ?\n  'localhost' :\n  'www.api.com'\n")])])]),t("ul",[t("li",[t("h4",{attrs:{id:"使用var定义时-应该一次定义一个变量而不是多个"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用var定义时-应该一次定义一个变量而不是多个"}},[a._v("#")]),a._v(" 使用var定义时，应该一次定义一个变量而不是多个")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// ✓ ok \nvar silent = true\nvar verbose = true\n \n// ✗ avoid \nvar silent = true, verbose = true\n \n// ✗ avoid \nvar silent = true,\n    verbose = true\n")])])]),t("ul",[t("li",[t("h4",{attrs:{id:"为条件表达式中的赋值操作添加单独的括号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为条件表达式中的赋值操作添加单独的括号"}},[a._v("#")]),a._v(" 为条件表达式中的赋值操作添加单独的括号")])])]),a._v(" "),t("p",[a._v("这样的清晰的表达，他是一个赋值操作而不是将"),t("code",[a._v("===")]),a._v("写错成"),t("code",[a._v("=")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// ✓ ok \nwhile ((m = text.match(expr))) {\n  // ... \n}\n \n// ✗ avoid \nwhile (m = text.match(expr)) {\n  // ... \n}\n")])])]),t("ul",[t("li",[t("h4",{attrs:{id:"不用在行末添加分号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不用在行末添加分号"}},[a._v("#")]),a._v(" 不用在行末添加分号")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("window.alert('hi')   // ✓ ok \nwindow.alert('hi');  // ✗ avoid \n")])])]),t("ul",[t("li",[a._v("不要将"),t("code",[a._v("(")]),a._v(","),t("code",[a._v("[")]),a._v(",`出现在行首，他们有可能引起潜在的问题(上一行是一个表达式时,并且结尾没有分号),可以将分号放在行首来解决这个问题")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// ✓ ok \n;(function () {\n  window.alert('ok')\n}())\n \n// ✗ avoid \n(function () {\n  window.alert('ok')\n}())\n// ✓ ok \n;[1, 2, 3].forEach(bar)\n \n// ✗ avoid \n[1, 2, 3].forEach(bar)\n// ✓ ok \n;`hello`.indexOf('o')\n \n// ✗ avoid \n`hello`.indexOf('o')\n")])])]),t("p",[a._v("当然尽可能提高可读的语句是更好的")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(";[1, 2, 3].forEach(bar)\n\n//To\n\nvar nums = [1, 2, 3]\nnums.forEach(bar)\n")])])]),t("hr"),a._v(" "),t("p",[a._v("合理的代码规范有利于团队写成可读性更高，更加标准规范的代码，但是有时很多的约束和限制中很多是一些华而不实的东西，你不会喜欢因为少了一个空格或多了一个空格时代码报错的感觉。\n我觉得很多东西权衡的是一个度的问题，团队应该总结和整理出适用于自己或不同阶段的代码规范，相信这会对团队的成长产生帮助。")])])}),[],!1,null,null,null);e.default=s.exports}}]);