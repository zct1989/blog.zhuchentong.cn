(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{438:function(e,n,t){"use strict";t.r(n);var s=t(39),a=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("从开发前端开始,开发用的IDE一直使用sublime,因为atom是使用nodejs开发，而且使用js可以开发插件，后面转投了atom，因为atom实在太卡，所以又重新用回了sublime，最后vscode终于有了自己的插件市场，开始使用vscode，速度虽然不如sublime，但是比atom好很多了，完全可以接受。")]),e._v(" "),t("p",[e._v("在这里整理自己vscode常用的插件和配置，可以在重新配置时方便些")]),e._v(" "),t("hr"),e._v(" "),t("h4",{attrs:{id:"beautify"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#beautify"}},[e._v("#")]),e._v(" Beautify")]),e._v(" "),t("p",[e._v("代码格式化插件，好处是可以通过项目中配置的.jsbeautifyrc文件，在不同的项目中按照不同的配置进行格式化，可以在团队开发时保持很好的代码格式化风格。")]),e._v(" "),t("p",[e._v("随便附上一个"),t("code",[e._v(".jsbeautifyrc")]),e._v("的配置:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n  // The plugin looks for a .jsbeautifyrc file in the same directory as the\n  // source file you\'re prettifying (or any directory above if it doesn\'t exist,\n  // or in your home folder if everything else fails) and uses those options\n  // along the default ones.\n  // Details: https://github.com/victorporof/Sublime-HTMLPrettify#using-your-own-jsbeautifyrc-options\n  // Documentation: https://github.com/einars/js-beautify/\n  "html": {\n    "allowed_file_extensions": [\n            "xhtml",\n            "shtml",\n            "xml",\n            "svg",\n            "wxml",\n            "htm",\n            "html",\n            "vue"\n        ],\n    "brace_style": "collapse-preserve-inline", // [collapse|expand|end-expand|none] Put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are\n    "end_with_newline": true, // End output with newline\n    "indent_char": " ", // Indentation character\n    "indent_handlebars": true, // e.g. {{#foo}}, {{/foo}}\n    "indent_inner_html": true, // Indent <head> and <body> sections\n    "indent_scripts": "normal", // [keep|separate|normal]\n    "indent_size": 2, // Indentation size\n    "max_preserve_newlines": 2, // Maximum number of line breaks to be preserved in one chunk (0 disables)\n    "preserve_newlines": true, // Whether existing line breaks before elements should be preserved (only works before elements, not inside tags or for text)\n    "unformatted": [\n            "span",\n            "code",\n            "pre",\n            "sub",\n            "sup",\n            "em",\n            "b",\n            "u",\n            "strike",\n            "big",\n            "small",\n            "pre"\n            /*"a","strong", "img", "i", "h1", "h2", "h3", "h4", "h5", "h6"*/\n        ], // List of tags that should not be reformatted\n    "wrap_line_length": 0 // Lines should wrap at next opportunity after this number of characters (0 disables)\n  },\n  "css": {\n    "allowed_file_extensions": ["css", "scss", "sass", "less", "wxss"],\n    "end_with_newline": true, // End output with newline\n    "indent_char": " ", // Indentation character\n    "indent_size": 2, // Indentation size\n    "newline_between_rules": true, // Add a new line after every css rule\n    "selector_separator": " ",\n    "selector_separator_newline": true // Separate selectors with newline or not (e.g. "a,\\nbr" or "a, br")\n  },\n  "js": {\n    "allowed_file_extensions": [\n            "js",\n            "json",\n            "jshintrc",\n            "jsbeautifyrc",\n            "babelrc"\n        ],\n    // Set brace_style\n    //  collapse: (old default) Put braces on the same line as control statements\n    //  collapse-preserve-inline: (new default) Same as collapse but better support for ES6 destructuring and other features. https://github.com/victorporof/Sublime-HTMLPrettify/issues/231\n    //  expand: Put braces on own line (Allman / ANSI style)\n    //  end-expand: Put end braces on own line\n    //  none: Keep them where they are\n    "brace_style": "collapse-preserve-inline",\n    "break_chained_methods": false, // Break chained method calls across subsequent lines\n    "e4x": false, // Pass E4X xml literals through untouched\n    "end_with_newline": true, // End output with newlinye\n    "indent_char": " ", // Indentation character\n    "indent_level": 0, // Initial indentation level\n    "indent_size": 2, // Indentation size\n    "indent_with_tabs": false, // Indent with tabs, overrides `indent_size` and `indent_char`\n    "jslint_happy": false, // If true, then jslint-stricter mode is enforced\n    "keep_array_indentation": true, // Preserve array indentation\n    "keep_function_indentation": true, // Preserve function indentation\n    "max_preserve_newlines": 2, // Maximum number of line breaks to be preserved in one chunk (0 disables)\n    "preserve_newlines": true, // Whether existing line breaks should be preserved\n    "space_after_anon_function": true, // Should the space before an anonymous function\'s parens be added, "function()" vs "function ()"\n    "space_before_conditional": true, // Should the space before conditional statement be added, "if(true)" vs "if (true)"\n    "space_in_empty_paren": true, // Add padding spaces within empty paren, "f()" vs "f( )"\n    "space_in_paren": false, // Add padding spaces within paren, ie. f( a, b )\n    "unescape_strings": false, // Should printable characters in strings encoded in \\xNN notation be unescaped, "example" vs "\\x65\\x78\\x61\\x6d\\x70\\x6c\\x65"\n    "wrap_line_length": 0 // Lines should wrap at next opportunity after this number of characters (0 disables)\n  }\n}\n')])])]),t("hr"),e._v(" "),t("h4",{attrs:{id:"eslint"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#eslint"}},[e._v("#")]),e._v(" ESLint")]),e._v(" "),t("p",[e._v("代码检测工具，也是现在比不可少的了，现在前端项目基本使用javascript-standard的代码风格进行开发，使用eslint按照javascript-standard的标准进行检测，也是在团队开发时让代码风格变得比较统一，同样可以读取项目中的"),t("code",[e._v(".eslintrc.js")]),e._v("文件进行配置，通过"),t("code",[e._v(".eslintignore")]),e._v("配置需要忽略的问题，同样附上之前的一份配置:")]),e._v(" "),t("p",[e._v(".eslintignore:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("build/*.js\nconfig/*.js\n")])])]),t("p",[e._v(".eslintrc.js:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// http://eslint.org/docs/user-guide/configuring\nmodule.exports = {\n  root: true,\n  parser: 'babel-eslint',\n  parserOptions: {\n    sourceType: 'module'\n  },\n  env: {\n    browser: true,\n  },\n  // https://github.com/feross/standard/blob/master/RULES.md#javascript-standard-style\n  extends: 'standard',\n  // required to lint *.vue files\n  plugins: [\n    'html'\n  ],\n  // add your custom rules here\n  'rules': {\n    // allow paren-less arrow functions\n    'arrow-parens': 0,\n    // allow async-await\n    'generator-star-spacing': 0,\n    \"space-before-function-paren\": 0,\n    // allow debugger during development\n    'no-debugger': process.env.NODE_ENV === 'production' ? 2 : 0\n  }\n}\n\n")])])]),t("hr"),e._v(" "),t("h4",{attrs:{id:"material-icon-theme"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#material-icon-theme"}},[e._v("#")]),e._v(" Material Icon Theme")]),e._v(" "),t("p",[e._v("文件图标主题，习惯了没什么好说的")]),e._v(" "),t("hr"),e._v(" "),t("h4",{attrs:{id:"short-js-doc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#short-js-doc"}},[e._v("#")]),e._v(" Short JS Doc")]),e._v(" "),t("p",[e._v("JS Doc插件，用来生成方法的注释用的插件，但是并不是很好用，主要是在vue文件中，效果并不好，以及对es6的支持。")]),e._v(" "),t("p",[e._v("同样文件头注释插件，也是对vue文件支持不好，所以一直没怎么用，有空了自己写一个")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("Vue 2 Snippets")]),e._v(" "),t("p",[e._v("Vue语法高亮以及代码提示，之前使用的"),t("code",[e._v("VueHelper")]),e._v(",但是使用"),t("code",[e._v("iview")]),e._v("时，一些提示不正常，就换成了这个，现在没什么问题")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("JavaScript Standard Style")]),e._v(" "),t("p",[e._v("JS Standard代码风格插件，可以自动对代码进行安装Standard进行修正，比仅仅eslist当然好好很多，比如会自动将"),t("code",[e._v('"')]),e._v("修改为"),t("code",[e._v("'")]),e._v("，避免了使用eslint还是需要手动修改的问题，但是整体代码格式化还是需要和别的插件配合使用，因为他只会格式化js代码，在vue文件中你还需要对html和css也进行格式化。不过这个插件需要在代码中依赖"),t("code",[e._v("standard")]),e._v("包，还需要进行一定的配置。")])])}),[],!1,null,null,null);n.default=a.exports}}]);