(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{424:function(e,a,n){"use strict";n.r(a);var r=n(39),t=Object(r.a)({},(function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("很多时候单一角色的缺陷管理是无法满足系统功能的需要，需要使用多角色进行管理，这个时候\n"),n("code",[e._v("Ownable.sol")]),e._v("就无法满足这种需求，这时可以使用"),n("code",[e._v("Role")]),e._v("来实现。")]),e._v(" "),n("p",[e._v("在开始之前先来说说"),n("code",[e._v("library")]),e._v(","),n("code",[e._v("library")]),e._v("一般是用来扩展"),n("code",[e._v("solidity")]),e._v("中的类型，可以在基础类型上扩展一些方法,如:"),n("code",[e._v("SafeMath")]),e._v("。当然可以以不是基础类型,比如自定义的结构体也可以。")]),e._v(" "),n("p",[n("code",[e._v("openzeppelin")]),e._v("中"),n("code",[e._v("Role")]),e._v("就是基于一个"),n("code",[e._v("Roles")]),e._v("的"),n("code",[e._v("library")]),e._v("定义的。")]),e._v(" "),n("p",[e._v("需要注意的是libaray中的方法的第一个参数需要是你要扩展的那个类型。")]),e._v(" "),n("p",[n("code",[e._v("Roles")]),e._v("的"),n("code",[e._v("library")]),e._v("中定义了对角色进行添加账户和删除账户的方法:")]),e._v(" "),n("h5",{attrs:{id:"结构体"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结构体"}},[e._v("#")]),e._v(" 结构体")]),e._v(" "),n("hr"),e._v(" "),n("ul",[n("li",[e._v("角色，包含了角色和账户的对应关系")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("struct Role {\n  mapping (address => bool) bearer;\n}\n")])])]),n("h5",{attrs:{id:"方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[e._v("#")]),e._v(" 方法")]),e._v(" "),n("hr"),e._v(" "),n("ul",[n("li",[e._v("用户添加角色")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function add(Role storage role, address account) internal\n")])])]),n("ul",[n("li",[e._v("用户删除角色")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function remove(Role storage role, address account) internal\n")])])]),n("ul",[n("li",[e._v("判断用户是否拥有该角色")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" function has(Role storage role, address account) internal view returns (bool)\n")])])]),n("h5",{attrs:{id:"代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[e._v("#")]),e._v(" 代码")]),e._v(" "),n("hr"),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("pragma solidity ^0.4.24;\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n * @dev 管理账户是否有对应角色的类库\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   * @dev 给账户添加对应角色\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   * @dev 删除账户对应角色\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   * @dev 检查账户是否具有该角色\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n")])])])])}),[],!1,null,null,null);a.default=t.exports}}]);