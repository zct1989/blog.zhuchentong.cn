(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{380:function(e,n,t){"use strict";t.r(n);var r=t(39),a=Object(r.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("之前说过因为"),t("code",[e._v("ETH")]),e._v("不是"),t("code",[e._v("ERC20")]),e._v("标准，所以无法直接使用"),t("code",[e._v("ETH")]),e._v("进行交易，但是可以通过将"),t("code",[e._v("ETH")]),e._v("兑换为"),t("code",[e._v("WETH")]),e._v("来进行交易，不过这样麻烦的是每次交易需要兑换WETH，并进行授权才可以进行交易。\n而"),t("code",[e._v("0x")]),e._v("还提供了另一种方法，那就是使用"),t("code",[e._v("forwarder")]),e._v(","),t("code",[e._v("forwarder")]),e._v("的翻译是")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("forwarder\n英 ['fɔːwədə]  美 ['fɔrwɚdɚ] \nn. 运送者，促进者；传送装置\n")])])]),t("p",[e._v("我理解的是更多是促进者的意思，就是帮助用户促成交易的工具，主要是实现快速通过ETH进行交易，自动完成"),t("code",[e._v("ETH")]),e._v("和"),t("code",[e._v("WETH")]),e._v("兑换的过程，对用户而言相当于直接使用"),t("code",[e._v("ETH")]),e._v("完成了交易。")]),e._v(" "),t("p",[t("code",[e._v("forwarder")]),e._v("就是专门实现"),t("code",[e._v("ETH")]),e._v("自动兑换执行交易的的库，它只有两个方法:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// Purchases as much of orders' makerAssets as possible by selling up to 95% of transaction's ETH value\n// 这个还是不很清楚\nmarketSellOrdersWithEthAsync\n    \n    \n// Attempt to purchase makerAssetFillAmount of makerAsset by selling ethAmount provided with transaction.\n// 直接支付ETH购买相应ERC20资产\nmarketBuyOrdersWithEthAsync\n")])])]),t("p",[t("code",[e._v("maker")]),e._v("对订单签名后直接可以使用"),t("code",[e._v("ETH")]),e._v("参与订单交易：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    txHash = await contractWrappers.forwarder.marketBuyOrdersWithEthAsync(\n        [signedOrder],\n        order.makerAssetAmount,\n        taker,\n        order.takerAssetAmount,\n        [],\n        0,\n        NULL_ADDRESS,\n        {\n            gasLimit: TX_DEFAULTS.gas,\n        },\n    );\n")])])]),t("p",[t("code",[e._v("ERC721")]),e._v("则类似，只需要将"),t("code",[e._v("signedOrder")]),e._v("信息换为对应"),t("code",[e._v("ERC721")]),e._v("信息即可。")]),e._v(" "),t("p",[t("code",[e._v("forwarder_bug_erc20_tokens")]),e._v("对应代码如下:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("PrintUtils.printScenario('Forwarder Buy Tokens');\n    // Initialize the ContractWrappers, this provides helper functions around calling\n    // 0x contracts as well as ERC20/ERC721 token contracts on the blockchain\n    const contractWrappers = new ContractWrappers(providerEngine, { networkId: NETWORK_CONFIGS.networkId });\n    // Initialize the Web3Wrapper, this provides helper functions around fetching\n    // account information, balances, general contract logs\n    // 获取maker,taker地址\n    const web3Wrapper = new Web3Wrapper(providerEngine);\n    const [maker, taker] = await web3Wrapper.getAvailableAddressesAsync();\n    const zrxTokenAddress = contractAddresses.zrxToken;\n    const etherTokenAddress = contractAddresses.etherToken;\n    const printUtils = new PrintUtils(\n        web3Wrapper,\n        contractWrappers,\n        { maker, taker },\n        { WETH: etherTokenAddress, ZRX: zrxTokenAddress },\n    );\n    printUtils.printAccounts();\n\n    // 设置交易金额\n    // the amount the maker is selling of maker asset\n    const makerAssetAmount = Web3Wrapper.toBaseUnitAmount(new BigNumber(5), DECIMALS);\n    // the amount the maker wants of taker asset\n    const takerAssetAmount = Web3Wrapper.toBaseUnitAmount(new BigNumber(0.1), DECIMALS);\n    // 0x v2 uses hex encoded asset data strings to encode all the information needed to identify an asset\n    // 设置交易资产信息\n    const makerAssetData = assetDataUtils.encodeERC20AssetData(zrxTokenAddress);\n    const takerAssetData = assetDataUtils.encodeERC20AssetData(etherTokenAddress);\n    let txHash;\n    let txReceipt;\n\n    // 进行对应资产授权\n    // Allow the 0x ERC20 Proxy to move ZRX on behalf of makerAccount\n    const makerZRXApprovalTxHash = await contractWrappers.erc20Token.setUnlimitedProxyAllowanceAsync(\n        zrxTokenAddress,\n        maker,\n    );\n    await printUtils.awaitTransactionMinedSpinnerAsync('Maker ZRX Approval', makerZRXApprovalTxHash);\n    // With the Forwarding contract, the taker requires no set up\n    PrintUtils.printData('Setup', [['Maker ZRX Approval', makerZRXApprovalTxHash]]);\n\n    // Set up the Order and fill it\n    const randomExpiration = getRandomFutureDateInSeconds();\n    const exchangeAddress = contractAddresses.exchange;\n\n    // Create the order\n    // 创建订单\n    const order: Order = {\n        exchangeAddress,\n        makerAddress: maker,\n        takerAddress: NULL_ADDRESS,\n        senderAddress: NULL_ADDRESS,\n        feeRecipientAddress: NULL_ADDRESS,\n        expirationTimeSeconds: randomExpiration,\n        salt: generatePseudoRandomSalt(),\n        makerAssetAmount,\n        takerAssetAmount,\n        makerAssetData,\n        takerAssetData,\n        makerFee: ZERO,\n        takerFee: ZERO,\n    };\n\n    printUtils.printOrder(order);\n\n    // Print out the Balances and Allowances\n    await printUtils.fetchAndPrintContractAllowancesAsync();\n    await printUtils.fetchAndPrintContractBalancesAsync();\n\n    // Generate the order hash and sign it\n    // 对订单进行签名\n    const orderHashHex = orderHashUtils.getOrderHashHex(order);\n    const signature = await signatureUtils.ecSignHashAsync(providerEngine, orderHashHex, maker);\n    const signedOrder = {\n        ...order,\n        signature,\n    };\n\n    // Use the Forwarder to market buy the ERC20 orders using Eth. When using the Forwarder\n    // the taker does not need to set any allowances or deposit any ETH into WETH\n    // 使用Forwarder直接通过ETH交换对应代币，不需要兑换为WETH\n    txHash = await contractWrappers.forwarder.marketBuyOrdersWithEthAsync(\n        [signedOrder],\n        order.makerAssetAmount,\n        taker,\n        order.takerAssetAmount,\n        [],\n        0,\n        NULL_ADDRESS,\n        {\n            gasLimit: TX_DEFAULTS.gas,\n        },\n    );\n    txReceipt = await printUtils.awaitTransactionMinedSpinnerAsync('marketBuyTokensWithEth', txHash);\n    printUtils.printTransaction('marketBuyTokensWithEth', txReceipt, [['orderHash', orderHashHex]]);\n\n    // Print the Balances\n    await printUtils.fetchAndPrintContractBalancesAsync();\n\n    // Stop the Provider Engine\n    providerEngine.stop();\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);