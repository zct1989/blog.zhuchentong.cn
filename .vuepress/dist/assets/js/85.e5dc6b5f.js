(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{402:function(t,s,a){"use strict";a.r(s);var n=a(39),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("之前看了"),a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2014/10/event-loop.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 运行机制详解：再谈Event Loop"),a("OutboundLink")],1),t._v("的文章，记录一下自己对js的Event Loop的理解。")]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"单线程的js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单线程的js"}},[t._v("#")]),t._v(" 单线程的JS")]),t._v(" "),a("p",[t._v("之前做.NET很多时候需要进行异步线程编程，以及一些异步资源调用处理的方面的内容，但是JS中并不存在这些问题，因为JavaScript语言的一大特点就是单线程，当然这是一开始对javascript语言的设计，DOM操作和很多语言一样都需要在主线程上进行操作。当然现在也有Web Worker可以实现js的多线程编程，这个有机会再说。")]),t._v(" "),a("h2",{attrs:{id:"如何进行异步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何进行异步"}},[t._v("#")]),t._v(" 如何进行异步")]),t._v(" "),a("p",[t._v("如果JS是一个单线程的语言那么如何进行异步操作的呢？其实主要就是靠一个东西那就是"),a("strong",[t._v("任务队列")]),t._v("，在js中存在两种任务,一种是同步任务，一种是异步任务。同步任务会在出现成上进行执行，而异步任务会发送给"),a("strong",[t._v("任务队列")]),t._v("，主进程便不会再管异步任务了，如果异步任务执行完成，那么他会在任务队列中放置一个事件，而主线程执行完成时，便会读取任务队列上的事件，进而去执行异步任务的回调函数。")]),t._v(" "),a("h2",{attrs:{id:"event-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event-loop"}},[t._v("#")]),t._v(" Event Loop")]),t._v(" "),a("p",[t._v("那么知道了如何执行异步任务那么什么是"),a("code",[t._v("Event Loop")]),t._v("呢？Loop是循环的一次，那么我看看JS的Event Loop是怎样的循环。")]),t._v(" "),a("ol",[a("li",[t._v("同步任务放入主线程上进行执行")]),t._v(" "),a("li",[t._v("异步任务放入任务队列进行执行")]),t._v(" "),a("li",[t._v("异步任务执行完毕后任务队列添加事件")]),t._v(" "),a("li",[t._v("主线程执行完成后获取任务队列事件，将事件对应任务放入主线程执行")])]),t._v(" "),a("p",[t._v("这么一个从主线程到异步队列在回到主线程的过程就叫做Event Loop,更准确的来说Event Loop是JS对异步事件的处理执行机制。")]),t._v(" "),a("p",[t._v("如果同步任务执行过程过长，那么也会会影响到对异步任务的读取，比如我们看下面的例子：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInterval")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'one second is gone'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上面这个例子中，我们设想的结果是，一直从1-1000进行重复的打印，每1秒钟打印一次"),a("code",[t._v("one second is gone")]),t._v("字符，但是实际情况呢？那就是"),a("code",[t._v("one second is gone")]),t._v("字符不会被打印出来，因为"),a("code",[t._v("while")]),t._v("中是一个死循环，在执行同步任务阶段已经被锁死了，他就不会去请求任务队列，所以"),a("code",[t._v("one second is gone")]),t._v("也无法打印。")]),t._v(" "),a("h2",{attrs:{id:"定时器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定时器"}},[t._v("#")]),t._v(" 定时器")]),t._v(" "),a("p",[t._v("定时器是最常用的一步任务之一了，它主要有setTimeout()和setInterval()这两个函数。")]),t._v(" "),a("p",[t._v("我们来引用"),a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2014/10/event-loop.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 运行机制详解：再谈Event Loop"),a("OutboundLink")],1),t._v("中的定时器例子来看那看一下。")]),t._v(" "),a("div",{staticClass:"language-javasciprt extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("console.log(1);\nsetTimeout(function(){console.log(2);},1000);\nconsole.log(3);\n")])])]),a("p",[t._v("好的，这个会输出"),a("code",[t._v("1 3 2")]),t._v("，因为"),a("code",[t._v("setTimeout()")]),t._v("将任务加入了任务队列，在1秒钟后再，加载入了主线程去执行了这行代码。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("我们也常写这样的代码，这回输出多少？结果是"),a("code",[t._v("2 1")]),t._v("。\n虽然我们设置了"),a("code",[t._v("setTimeout")]),t._v("延迟事件是0，看起来是立即执行，但是他依然会加入任务队列中，所以一定会在主线程中代码执行完后在进行执行。其次"),a("code",[t._v("setTimeout")]),t._v("参数实际无法设置真正的0，")]),t._v(" "),a("p",[t._v("HTML5标准规定了setTimeout()的第二个参数的最小值（最短间隔），不得低于4毫秒，如果低于这个值，就会自动增加。在此之前，老版本的浏览器都将最短间隔设为10毫秒。另外，对于那些DOM的变动（尤其是涉及页面重新渲染的部分），通常不会立即执行，而是每16毫秒执行一次。这时使用requestAnimationFrame()的效果要好于setTimeout()。")]),t._v(" "),a("p",[t._v("实际"),a("code",[t._v("setTimeout")]),t._v("也无法保证会在对应的事件后进行执行,就像最开始的例子一样，"),a("code",[t._v("setTimeout")]),t._v("加入任务队列，只有主线程执行完了之后才会去读取任务队列，遇到"),a("code",[t._v("setTimeout")]),t._v("时会判断事件时候应该执行,但是我们无法保证主线程上的任务执行时间。")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("理解了Event Loop才能理解JS对异步任务执行的处理，包括像很多类似"),a("code",[t._v("nextTick")]),t._v("的处理。")])])}),[],!1,null,null,null);s.default=e.exports}}]);