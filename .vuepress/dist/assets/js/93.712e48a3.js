(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{410:function(t,a,r){"use strict";r.r(a);var c=r(39),n=Object(c.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[t._v("try...catch...finally是我们常见的编程工具，今天我们来一起说一下JavaScript中try...catch...finally。")]),t._v(" "),r("h4",{attrs:{id:"try语句"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#try语句"}},[t._v("#")]),t._v(" try语句")]),t._v(" "),r("p",[t._v("try语句具有三种形式:")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("1. try...catch\n2. try...finally\n3. try...catch...finally\n")])])]),r("p",[r("code",[t._v("try")]),t._v("语句至少需要配合一个"),r("code",[t._v("catch")]),t._v("或"),r("code",[t._v("finally")]),t._v("出现，也可以"),r("code",[t._v("catch")]),t._v("和"),r("code",[t._v("finally")]),t._v("都出现。")]),t._v(" "),r("h4",{attrs:{id:"catch的异常标识符"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#catch的异常标识符"}},[t._v("#")]),t._v(" catch的异常标识符")]),t._v(" "),r("p",[r("code",[t._v("catch")]),t._v("可以使用"),r("code",[t._v("catch(e)")]),t._v("来保存被抛出的异常值，当然也可以不声明异常标识符:")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("try{\n\n}catch{\n\n}\n")])])]),r("h4",{attrs:{id:"try-catch-finally的return"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#try-catch-finally的return"}},[t._v("#")]),t._v(" try...catch...finally的return")]),t._v(" "),r("p",[t._v("在JavaScript中try,catch,finally都可以有return语句:")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("function testTry() {\n  try {\n    return 1;\n  } catch (ex) {\n    return 2;\n  } finally {\n    return 3\n  }\n}\n\nconsole.log(testTry()); // 3\n\n")])])]),r("p",[t._v("可以看到他的执行顺序"),r("code",[t._v("try -> (catch) -> finally")]),t._v(","),r("code",[t._v("finally")]),t._v("的返回值可以覆盖之前的返回值。")]),t._v(" "),r("h4",{attrs:{id:"try-catch-finally的异常流"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#try-catch-finally的异常流"}},[t._v("#")]),t._v(" try...catch...finally的异常流")]),t._v(" "),r("p",[r("code",[t._v("try...catch...finally")]),t._v("的异常流会在沿着执行流发出,如果当前"),r("code",[t._v("try")]),t._v("存在"),r("code",[t._v("catch")]),t._v("会在当前"),r("code",[t._v("catch-block")]),t._v("中被捕获，如果不存在将异常向外层抛出")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('try {\n  try {\n    throw new Error("error1");\n  }\n  finally {\n    console.log("finally");\n  }\n}\ncatch (ex) {\n  console.error("outer catch", ex.message);\n}\n\n// finally\n// outer catch error1\n')])])]),r("p",[t._v("当时需要注意的是当异常流传递到内部"),r("code",[t._v("try")]),t._v("语句的"),r("code",[t._v("finally-block")]),t._v("中是如果存在"),r("code",[t._v("return")]),t._v("语句，则会中止异常流的抛出")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('try {\n  try {\n    throw new Error("error1");\n  }\n  catch (ex) {\n    console.error("inner catch", ex.message);\n    throw ex;\n  }\n  finally {\n    console.log("finally");\n    return;\n  }\n}\ncatch (ex) {\n  console.error("outer catch", ex.message);\n}\n\n// inner catch error1\n// finally\n')])])]),r("p",[t._v("可以看到异常并没有进入到外层的"),r("code",[t._v("catch")]),t._v("语句中。")])])}),[],!1,null,null,null);a.default=n.exports}}]);