(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{441:function(t,e,a){"use strict";a.r(e);var n=a(39),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("在开发基于Vue3的项目中发现我们可以不再依赖Vuex也能很方便的来管理数据,只需要通过"),a("code",[t._v("Composition Api")]),t._v("可以快捷的建立简单易懂的全局数据存储.")]),t._v(" "),a("h4",{attrs:{id:"创建state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建state"}},[t._v("#")]),t._v(" 创建State")]),t._v(" "),a("p",[t._v("通过"),a("code",[t._v("reactive")]),t._v("我们来创建state,暴露的"),a("code",[t._v("IState")]),t._v("是用来方便其他文件来接受"),a("code",[t._v("State")]),t._v("对象")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import { reactive } from 'vue'\n\nexport interface IState {\n    code: string\n    token: string\n    user: any\n}\n\nexport const State: IState = {\n    code: '',\n    token: '',\n    user: {}\n}\n\nexport function createState() {\n    return reactive(State)\n}\n")])])]),t._v(" "),a("h4",{attrs:{id:"创建action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建action"}},[t._v("#")]),t._v(" 创建Action")]),t._v(" "),a("p",[t._v("我们来创建"),a("code",[t._v("Action")]),t._v("来作为我们修改"),a("code",[t._v("State")]),t._v("的方法")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import { reactive } from 'vue'\nimport { IState } from './state'\n\nfunction updateCode(state: IState) {\n    return (code: string) => {\n        state.code = code\n    }\n}\n\nfunction updateToken(state: IState) {\n    return (token: string) => {\n        state.token = token\n    }\n}\n\nfunction updateUser(state: IState) {\n    return (user: any) => {\n        state.user = user\n    }\n}\n\n/**\n * 创建Action\n * @param state\n */\nexport function createAction(state: IState) {\n    return {\n        updateToken: updateToken(state),\n        updateCode: updateCode(state),\n        updateUser: updateUser(state)\n    }\n}\n")])])]),a("p",[t._v("通过暴露的"),a("code",[t._v("IState")]),t._v("我们也可以实现对State的代码访问.")]),t._v(" "),a("h4",{attrs:{id:"创建store"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建store"}},[t._v("#")]),t._v(" 创建Store")]),t._v(" "),a("p",[t._v("创建好"),a("code",[t._v("State")]),t._v("和"),a("code",[t._v("Action")]),t._v("后我们将它们通过"),a("code",[t._v("Store")]),t._v("整合在一起.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import { reactive, readonly } from 'vue'\nimport { createAction } from './action'\nimport { createState } from './state'\n\nconst state = createState()\nconst action = createAction(state)\n\nexport const useStore = () => {\n    const store = {\n        state: readonly(state),\n        action: readonly(action)\n    }\n\n    return store\n}\n")])])]),a("p",[t._v("这样我们就可以在项目中通过调用"),a("code",[t._v("useStore")]),t._v("访问和修改"),a("code",[t._v("State")]),t._v(",因为通过"),a("code",[t._v("useStore")]),t._v("返回的"),a("code",[t._v("State")]),t._v("是通过"),a("code",[t._v("readonly")]),t._v("生成的,所以就确认只有"),a("code",[t._v("Action")]),t._v("可以对其进行修改.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 访问state\nconst store = useStore()\nstore.state.code\n\n// 调用action\nconst store = useStore()\nstore.action.updateCode(123)\n")])])]),a("p",[t._v("这样我们就离开了Vuex并创建出了可是实时更新的数据中心.")]),t._v(" "),a("h4",{attrs:{id:"持久化存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#持久化存储"}},[t._v("#")]),t._v(" 持久化存储")]),t._v(" "),a("p",[t._v("很多Store中的数据还是需要实现持久化存储,来保证页面刷新后数据依然可用,我们主要基于"),a("code",[t._v("watch")]),t._v("来实现持久化存储")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import { watch, toRaw } from 'vue'\n\nexport function createPersistStorage<T>(state: any, key = 'default'): T {\n    const STORAGE_KEY = '--APP-STORAGE--'\n\n    // init value\n    Object.entries(getItem(key)).forEach(([key, value]) => {\n        state[key] = value\n    })\n\t\n    function setItem(state: any) {\n        const stateRow = getItem()\n        stateRow[key] = state\n        const stateStr = JSON.stringify(stateRow)\n        localStorage.setItem(STORAGE_KEY, stateStr)\n    }\n\n    function getItem(key?: string) {\n        const stateStr = localStorage.getItem(STORAGE_KEY) || '{}'\n        const stateRow = JSON.parse(stateStr) || {}\n        return key ? stateRow[key] || {} : stateRow\n    }\n\n    watch(state, () => {\n        const stateRow = toRaw(state)\n        setItem(stateRow)\n    })\n\n    return readonly(state)\n}\n")])])]),a("p",[t._v("通过"),a("code",[t._v("watch")]),t._v("和"),a("code",[t._v("toRaw")]),t._v("我们就实现了"),a("code",[t._v("state")]),t._v("和"),a("code",[t._v("localstorage")]),t._v("的交互.")]),t._v(" "),a("p",[t._v("只需要将"),a("code",[t._v("readonly")]),t._v("更换成"),a("code",[t._v("createPersistStorage")]),t._v("即可")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("export const useStore = () => {\n    const store = {\n        state: createPersistStorage<IState>(state),\n        action: readonly(action)\n    }\n\n    return store\n}\n")])])]),a("p",[t._v("这样也就实现了对Store数据的持久化支持.")])])}),[],!1,null,null,null);e.default=s.exports}}]);