(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{376:function(e,n,t){"use strict";t.r(n);var r=t(39),a=Object(r.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("之前介绍了"),t("a",{attrs:{href:"https://github.com/0xProject/0x-starter-project",target:"_blank",rel:"noopener noreferrer"}},[e._v("0x-start-project"),t("OutboundLink")],1),e._v("学习前需要只要的一些知识，现在我们来具体的学习"),t("code",[e._v("0x-start-project")]),e._v("。\n"),t("code",[e._v("0x-start-project")]),e._v("是对"),t("code",[e._v("0x-project")]),e._v("一些具体业务场景的模拟与实现，通过对"),t("code",[e._v("0x-start-project")]),e._v("源码的学习，可以更加便于我们了解"),t("code",[e._v("0x-project")]),e._v("的以业务流程以及具体代码的实现。")]),e._v(" "),t("p",[e._v("通过查看"),t("a",{attrs:{href:"https://github.com/0xProject/0x-starter-project/blob/master/src/scenarios/all.ts",target:"_blank",rel:"noopener noreferrer"}},[e._v("scenarios/all"),t("OutboundLink")],1),e._v("文件，可以发现"),t("code",[e._v("0x-start-project")]),e._v("主要模拟实现了如下场景:")]),e._v(" "),t("ul",[t("li",[e._v("fillOrderERC20();")]),e._v(" "),t("li",[e._v("fillOrderFees();")]),e._v(" "),t("li",[e._v("fillOrderERC721();")]),e._v(" "),t("li",[e._v("matchOrders();")]),e._v(" "),t("li",[e._v("executeTransaction();")]),e._v(" "),t("li",[e._v("executeTransactionCancelOrder();")]),e._v(" "),t("li",[e._v("cancelOrdersUpTo();")]),e._v(" "),t("li",[e._v("forwarder_buy_erc20_tokens();")]),e._v(" "),t("li",[e._v("forwarder_buy_erc721_tokens();")]),e._v(" "),t("li",[e._v("fillOrderMultiAsset();")]),e._v(" "),t("li",[e._v("dutchAuction();")])]),e._v(" "),t("p",[e._v("它们对应了0x project不同的业务场景或交易策略。")]),e._v(" "),t("p",[e._v("在这些场景之外还提供了可以运行的"),t("code",[e._v("SRA(standard relayer api)")]),e._v("服务来模拟简单的"),t("code",[e._v("Relayer")]),e._v("的实现。")]),e._v(" "),t("p",[e._v("在开始运行项目之前，你需要使用"),t("code",[e._v("0x project")]),e._v("提供的ganache快照，来运行"),t("code",[e._v("ganache-cli")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("yarn download_snapshot\nyarn ganache-cli\n")])])]),t("p",[e._v("我们本次会主要学习下面三个场景:")]),e._v(" "),t("ul",[t("li",[e._v("fillOrderERC20();")]),e._v(" "),t("li",[e._v("fillOrderFees();")]),e._v(" "),t("li",[e._v("fillOrderERC721();")])]),e._v(" "),t("p",[e._v("它们都是以填写订单的场景，区别在于交易的币种以及是否具有交易费用。")]),e._v(" "),t("p",[e._v("基本都是如下步骤:")]),e._v(" "),t("ol",[t("li",[e._v("向0x进行对应交易币种授权,如含有交易费用需要对ZRX进行授权")]),e._v(" "),t("li",[e._v("卖方创建订单并进行签名")]),e._v(" "),t("li",[e._v("买方执行签名后订单并完成交易")])]),e._v(" "),t("p",[e._v("订单在第3步之前都在链下进行，当执行订单时("),t("code",[e._v("fillOrder")]),e._v(")数据才会上链，这时会返回对应的"),t("code",[e._v("txHash")]),e._v(",通过判断"),t("code",[e._v("txHash")]),e._v("来确认交易完成。")]),e._v(" "),t("p",[e._v("我们以对应的"),t("code",[e._v("fillOrderFees")]),e._v("代码为例来学习:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("PrintUtils.printScenario('Fill Order with Fees');\n    // Initialize the ContractWrappers, this provides helper functions around calling\n    // 0x contracts as well as ERC20/ERC721 token contracts on the blockchain\n    // 实例化contractWrappers\n    const contractWrappers = new ContractWrappers(providerEngine, { networkId: NETWORK_CONFIGS.networkId });\n    // Initialize the Web3Wrapper, this provides helper functions around fetching\n    // account information, balances, general contract logs\n    // 实例化web3Wrapper\n    // providerEngine确定了进行连接的网络\n    const web3Wrapper = new Web3Wrapper(providerEngine);\n    // 从ganache生成的10个地址中取前三个分别作为卖方地址，买方地址，中介费用接收地址\n    const [maker, taker, feeRecipient] = await web3Wrapper.getAvailableAddressesAsync();\n    // 获取ZRX代币合约地址\n    const zrxTokenAddress = contractAddresses.zrxToken;\n    // 获取WETH代币合约地址\n    const etherTokenAddress = contractAddresses.etherToken;\n    // PrintUtils为辅助的信息打印库\n    const printUtils = new PrintUtils(\n        web3Wrapper,\n        contractWrappers,\n        { maker, taker, feeRecipient },\n        { WETH: etherTokenAddress, ZRX: zrxTokenAddress },\n    );\n    // 输出账户信息\n    printUtils.printAccounts();\n\n    // the amount the maker is selling in maker asset\n    // toBaseUnitAmount为按精度转换金额，返回值为BigNumber\n    // 卖方出售金额\n    const makerAssetAmount = Web3Wrapper.toBaseUnitAmount(new BigNumber(5), DECIMALS);\n    // the amount the maker wants of taker asset\n    // 卖方支付金额\n    const takerAssetAmount = Web3Wrapper.toBaseUnitAmount(new BigNumber(0.1), DECIMALS);\n    // the amount of fees the maker pays in ZRX\n    // 卖方交易费用\n    const makerFee = Web3Wrapper.toBaseUnitAmount(new BigNumber(0.01), DECIMALS);\n    // the amount of fees the taker pays in ZRX\n    // 买方交易费用\n    const takerFee = Web3Wrapper.toBaseUnitAmount(new BigNumber(0.01), DECIMALS);\n\n    // 0x v2 uses hex encoded asset data strings to encode all the information needed to identify an asset\n    // 如果是ERC20,AssetData需要通过encodeERC20AssetData设置tokenaddress来确定币种\n    // 如果是ERC721,AssetData可以传入tokenaddress以及tokenid\n    // const makerAssetData = assetDataUtils.ecodeERC721AssetData(dummyERC721TokenContract.address, tokenId);\n    // 卖方卖出币种\n    const makerAssetData = assetDataUtils.encodeERC20AssetData(zrxTokenAddress);\n    // 买方卖出币种\n    const takerAssetData = assetDataUtils.encodeERC20AssetData(etherTokenAddress);\n    \n    // 用于接收fillorder交易的Hash\n    let txHash;\n    // 用于接收fillorder交易的数据\n    let txReceipt;\n\n    // Approve the ERC20 Proxy to move ZRX for maker and taker\n    // 设置卖方交易授权\n    // 用于支付交易费用\n    const makerZRXApprovalTxHash = await contractWrappers.erc20Token.setUnlimitedProxyAllowanceAsync(\n        zrxTokenAddress,\n        maker,\n    );\n    await printUtils.awaitTransactionMinedSpinnerAsync('Maker ZRX Approval', makerZRXApprovalTxHash);\n    // 设置买方交易授权\n    // 用于支付交易费用\n    // ERC721需要使用contractWrappers.erc721Token.setProxyApprovalForAllAsync进行授权\n    const takerZRXApprovalTxHash = await contractWrappers.erc20Token.setUnlimitedProxyAllowanceAsync(\n        zrxTokenAddress,\n        taker,\n    );\n    await printUtils.awaitTransactionMinedSpinnerAsync('Taker ZRX Approval', takerZRXApprovalTxHash);\n\n    // Allow the 0x ERC20 Proxy to move WETH on behalf of takerAccount\n    // WETH账户授权\n    const takerWETHApprovalTxHash = await contractWrappers.erc20Token.setUnlimitedProxyAllowanceAsync(\n        etherTokenAddress,\n        taker,\n    );\n    await printUtils.awaitTransactionMinedSpinnerAsync('Taker WETH Approval', takerWETHApprovalTxHash);\n\n    // Convert ETH into WETH for taker by depositing ETH into the WETH contract\n    // 兑换WETH\n    const takerWETHDepositTxHash = await contractWrappers.etherToken.depositAsync(\n        etherTokenAddress,\n        takerAssetAmount,\n        taker,\n    );\n    await printUtils.awaitTransactionMinedSpinnerAsync('Taker WETH Deposit', takerWETHDepositTxHash);\n   // 打印操作信息\n    PrintUtils.printData('Setup', [\n        ['Maker ZRX Approval', makerZRXApprovalTxHash],\n        ['Taker ZRX Approval', takerZRXApprovalTxHash],\n        ['Taker WETH Approval', takerWETHApprovalTxHash],\n        ['Taker WETH Deposit', takerWETHDepositTxHash],\n    ]);\n\n    // Set up the Order and fill it\n    // 生成订单过期时间\n    const randomExpiration = getRandomFutureDateInSeconds();\n    // 0x合约地址(用于交易)\n    const exchangeAddress = contractAddresses.exchange;\n\n    // Create the order\n    // 创建订单信息\n    const order: Order = {\n        exchangeAddress, // 0x合约地址\n        makerAddress: maker, // maker卖方地址\n        takerAddress: NULL_ADDRESS,// 买方地址\n        senderAddress: NULL_ADDRESS,// TODO: 应该是执行交易者的地址\n        feeRecipientAddress: feeRecipient,// 中介费用接收地址\n        expirationTimeSeconds: randomExpiration, // 过期时间\n        salt: generatePseudoRandomSalt(),//随机种子 - 盐\n        makerAssetAmount,// 卖方交易金额\n        takerAssetAmount,// 买方交易金额\n        makerAssetData,// 卖方交易币种\n        takerAssetData,// 买方交易币种\n        makerFee,// 卖方支付中介费用 为0代表无中介费用\n        takerFee,// 买方支付中介费用\n    };\n\t\n    // 打印订单信息\n    printUtils.printOrder(order);\n\n    // Print out the Balances and Allowances\n    // 打印授权信息\n    await printUtils.fetchAndPrintContractAllowancesAsync();\n    // 打印账户余额信息\n    await printUtils.fetchAndPrintContractBalancesAsync();\n\n    // Generate the order hash and sign it\n    // 获取订单HASH\n    const orderHashHex = orderHashUtils.getOrderHashHex(order);\n    // 进行订单签名\n    const signature = await signatureUtils.ecSignHashAsync(providerEngine, orderHashHex, maker);\n    // 签名后的订单,多出了signature字段\n    const signedOrder = { ...order, signature };\n    // Fill the Order via 0x Exchange contract\n    // 执行订单交易\n    txHash = await contractWrappers.exchange.fillOrderAsync(signedOrder, takerAssetAmount, taker, {\n        gasLimit: TX_DEFAULTS.gas,\n    });\n    // 等待交易完成获取交易数据\n    txReceipt = await printUtils.awaitTransactionMinedSpinnerAsync('fillOrder', txHash);\n    // 打印交易信息\n    printUtils.printTransaction('fillOrder', txReceipt, [\n        ['orderHash', orderHashHex],\n        ['takerAssetAmount', takerAssetAmount.toString()],\n    ]);\n\n    // Print the Balances\n    // 打印余额信息\n    await printUtils.fetchAndPrintContractBalancesAsync();\n\n    // Stop the Provider Engine\n    providerEngine.stop();\n")])])]),t("p",[t("a",{attrs:{href:"https://github.com/0xProject/0x-monorepo/tree/development/packages/web3-wrapper",target:"_blank",rel:"noopener noreferrer"}},[e._v("Web3Wrapper"),t("OutboundLink")],1),e._v("是的以太坊相关的工具库，用于相关的工具操作。")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/0xProject/0x-monorepo/tree/development/packages/contract-wrappers",target:"_blank",rel:"noopener noreferrer"}},[e._v("ContractWrappers"),t("OutboundLink")],1),e._v("是合约相关的操作库，进行如"),t("code",[e._v("ERC20")]),e._v(","),t("code",[e._v("ERC721")]),e._v(","),t("code",[e._v("WETH")]),e._v("等合约相关的操作。")]),e._v(" "),t("p",[e._v("其中"),t("code",[e._v("contractWrappers.exchange")]),e._v("是和"),t("code",[e._v("0x")]),e._v("相关交易的操作")])])}),[],!1,null,null,null);n.default=a.exports}}]);